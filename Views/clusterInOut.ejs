<html>
    <head>
        <%- include('./head') %>
        
    </head>
    <body>
        <%- include('./header') %>
        <section>
            <h1 id="title">InOut Graph</h1>
            <div class="canvas"></div>
            <ul id="list">
            </ul>
        </section>
        <script type="text/javascript">
            const inOutLog = <%- JSON.stringify(clusterInOutUsers) %>
            const ul = document.querySelector('#list')

            const Gaepo = inOutLog.filter(e => e.location === 0)
            const Seocho = inOutLog.filter(e => e.location === 1)

            const GaepoPoint = {};
            const SeochoPoint = {};
            
            let num = 0;
            let hour = 0;
            Gaepo.forEach(log => {
                if (Object.keys(GaepoPoint).indexOf(String(log.day)) === -1) {
                    hour = 0
                    GaepoPoint[log.day] = { [hour] : num }
                }
                while ((hour + 1) * 3600 < log.timestamp)
                {
                    GaepoPoint[log.day][hour + 1] = num
                    hour += 1
                }   
                num += log.inout
                GaepoPoint[log.day][hour + 1] = num
            })
            num = 0;
            hour = 0;
            Seocho.forEach(log => {
                if (Object.keys(SeochoPoint).indexOf(String(log.day)) === -1) {
                    hour = 0
                    SeochoPoint[log.day] = { [hour] : num }
                }
                while ((hour + 1) * 3600 < log.timestamp)
                {
                    SeochoPoint[log.day][hour + 1] = num
                    hour += 1
                }   
                num += log.inout
                SeochoPoint[log.day][hour + 1] = num
            })


            const margin = {top: 50, right: 50, bottom: 50, left: 50}
            const width = 500 - margin.left - margin.right
            const height = 500 - margin.top - margin.bottom

            const xScale = d3.scaleLinear().domain([0, 24]).range([0, width])
            const yScale = d3.scaleLinear().domain([0, 150]).range([height, 0])
            const line = d3.line()
            .x((d, i) => xScale(d[0]))
            .y((d, i) => yScale(d[1]))
            
            const container = d3.select('.canvas')
            let svg;
            
            for (let key in SeochoPoint) {
                svg = container.append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`)

                svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .attr('class', 'xScale')
                .call(d3.axisBottom(xScale))

                svg.append('g')
                .attr('class', 'yScale')
                .call(d3.axisLeft(yScale))
            
                svg.append('path')
                .datum(Object.entries(SeochoPoint[key]).map(([key, value]) => [key, value]))
                .attr('d', line)
                .attr('stroke', 'blue')
                .attr("stroke-width", 1)
                .attr('fill', 'none')

                svg.append('path')
                .datum(Object.entries(GaepoPoint[key]).map(([key, value]) => [key, value]))
                .attr('d', line)
                .attr('stroke', 'red')
                .attr("stroke-width", 1)
                .attr('fill', 'none')
            }
            
            
            

            
            
            



            /*
            const frag = document.createDocumentFragment()
            dummy.forEach(({ timestamp, id, location }) => {
                const li = document.createElement("li")
                const hour = parseInt(timestamp / 3600)
                const min = parseInt((timestamp % 3600) / 60)
                li.insertAdjacentHTML(
                    "beforeend",
                    `<div>
                        <p>${id}</p>  
                        <p>"개포"</p>
                        <p>${hour}:${min}</p>
                    </div>`
                )
                frag.appendChild(li)
            })
            ul.appendChild(frag)
            */
        </script>
    </body>
</html>